Bugs:


General:
	refactor parser.y
	improve error messages and catch error recovery segfaults


Done:
*	report all execlp calls
*	catch all execlp returns
*	as much as i saw, all exclp invocations. when they should be using tmp_filename_too, they simply use tmp_filename... fix that => FIXED
*	libpzc.ll: libpzc.lli was at fault for always rebuilding... @alex: Do not touch base makefile. I will fix it.	=>	DONE
*	WARNING: if unoptimized, integer overflows may throw runtime segfault - nothing we can do (poison values).	=>	CHECK: Can we do nothing?	=>	opt does prevent at least some cases of segfault on overflow.
*	Fix Makefile when using files assuming they are on current folder, to use directory of Makefile as base (currently -C does not work).	=>	Only on laptop? Desktop seems to work fine.	=>	My mistake...
*	leak:	pzc.lex:90		->	id allocation
*	leak:	symbol.c:539	->	creating new element to return		==> I think we need to assign all typeArray() calls to variables and then free them...
*	leak:	pzc.lex:130		->	creating new string token to return
*	leak:	pzc.lex:*		->	any token with new() call
*	leak:	ir.c:*			->	anything that has to do with function call frames
*	Leak fixing MUST be marked "//BUG-SQUASHING".
*	furnish code with proper deallocations (for example unlink the tmpfile, all the structures we use, ...) and put them in cleanup (and the temps in the proper places)
*   Strings of 23 characters have a \22 added at their llvm IR for some reason, and it breaks everything.
*	When function declaration and call types differ, compiler segfaults during compilation (tests/examples/testing_bug1.pzc).	==> Fixed for argument number, untested for argument type.
*	Add -gc flag to makefile for gcc call - linking, and make all delete() calls ineffective. Check with valgrind.
*	fix the way libc functions are called:
*		string.h functions need a different string format
*		READ_STRING needs to be hand-writen to comply to the spec
*	Add explanation of steps in main().
*	Add flags for clang (linker - object generation) for executable generation.		=>	CHECK	=>	CHECKED
*	Add stat() calls for default library location and default location in ARG_END option parser when output is OUT_EXEC.	=>	Works just fine.
*	Add library flag.																=>	CHECK	=>	CHECKED
*	Add llvm-link in OUT_EXEC case of main.
*	Finish clang call in OUT_EXEC case of main.
*	Add a user option to generate the elf file (x86 only)			=> This is the default output type.
*	Input filename always appears as stdin (just present it with an error and see output - i.e. unknown identified).
*   Change long double to double everywhere
*	compiler arguments and llvm backend invocation (link together?)
*   library edited to exclude c-style names and built with $jwasm -elf -zcw /path/to/lib/            
*	leak:	parser.y:461	->	creating name string for reference variables	=>	parser.y:467
*	leak:	ir.c:188		->	function call frame argument list allocation	=>	ir.c:153
*	leak:	ir.c:49			->	creating an array for GEP (of some sort - i dont remember)	=> parser.y:810
*   statements: WRITE + FORMAT
*	leak:	tmpfile			->	does not delete tmpfile
*	leak:	general.c:83	->	what about closing general scope?
*	static compilation invocation	-> call llc and opt (opt done, only llc remains :: llc finished too)
*	fix LLVMPrintModulToFile to properly accept file name (it could have something to do with file creation flags in open())
*	command line parameter parsing	-> mostly done :: have to propagate flags to llc and opt
*	stricter array parameter size checking
*	pass-by-reference parameters
*	functions with a return value are not emitted without an assignment
*	replace currentCallType and currentParam with CallTypeStack and ParamStack
*	loop_counter is not needed for anything else than checking if continue and break statements are legal, remove it. We have break_is_legal, but atm it doesn't function with continue statements.	-> %s/break_is_legal/control_flow_flags/gc' ed.
*	statemets: if, for, while, do..until, switch
*	global array initializations 
*	IR - global variables
*	IR - global constants
*	IR - constant expression assignments
*	IR - array initializations 
*	IR - assignments
*	IR - binops + signed operations
*	IR - unops
*	signed operations handling
*	parser.y cleanup and polishing
*	refactor comp_lib	:: Done, moved to semantic
*	test forward function declarations
*	break is not error. it is statement. instead we must use contexts to check for constructs that use loops, so that we can assign value to break or continue statements
*	real constants : atof already converts between them
*	l_value++
*	return statement type checking
*	function calls
-	array sizes
*	refactor error reporting
*	substitute error.c functions for my_error
*	control_flow_flags inheritance schema:
		if(X)		->	X
		while(X)	->	X | 01
		do(X)		->	X | 01
		for(X)		->	X | 01
		switch(X)	->	X | 10
	>>
		switch break is indicated by 1X bit, and while control flow is indicated by X1 bit.
*	function declarations and calls
*	capture llvm stream ( dump to file? )
